rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // ---------- profiles ----------
    match /profiles/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId)
        && request.resource.data.keys().hasOnly(['email','createdAt']);
      allow update: if isOwner(userId)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['email']);
      allow delete: if false;

      match /favorites/{listingId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && request.resource.data.keys().hasOnly(['listingId','createdAt'])
          && request.resource.data.listingId == listingId;
        allow delete: if isOwner(userId);
        allow update: if false;
      }
    }

    // ---------- categories ----------
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }

    // ---------- listings ----------
    match /listings/{listingId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.title is string
        && request.resource.data.title.size() >= 2
        && request.resource.data.title.size() <= 120
        && request.resource.data.quantity is number
        && request.resource.data.quantity >= 1
        && request.resource.data.status in ['active','sold','archived']
        && request.resource.data.createdAt == request.time
        && request.resource.data.updatedAt == request.time;

      allow update: if isOwner(resource.data.ownerId)
        && request.resource.data.ownerId == resource.data.ownerId
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.updatedAt == request.time
        && request.resource.data.title is string
        && request.resource.data.title.size() >= 2
        && request.resource.data.title.size() <= 120
        && request.resource.data.quantity is number
        && request.resource.data.quantity >= 1
        && request.resource.data.status in ['active','sold','archived'];

      allow delete: if isOwner(resource.data.ownerId);

      match /media/{mediaId} {
        allow read: if true;
        allow create: if isOwner(get(/databases/$(database)/documents/listings/$(listingId)).data.ownerId)
          && request.resource.data.filePath is string
          && request.resource.data.sortIndex is number
          && request.resource.data.createdAt == request.time;
        allow update: if false;
        allow delete: if isOwner(get(/databases/$(database)/documents/listings/$(listingId)).data.ownerId);
      }
    }

    // ברירת מחדל: חסום הכל
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
